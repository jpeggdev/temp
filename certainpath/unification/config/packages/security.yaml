security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        api_user_provider:
            id: App\Security\ApiUserProvider
        auth0_provider:
            id: Auth0\Symfony\Security\UserProvider
        app_user_provider:
            id: App\Security\UserProvider
        chained_providers:
            chain:
                providers: ['app_user_provider', 'auth0_provider']
    firewalls:
        api:
            pattern: ^/api # A pattern example for stateless (token-based authorization) route requests
            stateless: true
            custom_authenticators:
                - App\Security\ApiKeyAuthenticator
            provider: api_user_provider
            switch_user: false
            form_login: false
            http_basic: false
        app:
            pattern: ^/(app|admin) # A pattern example for stateful (session-based authentication) route requests
            provider: app_user_provider
            custom_authenticators:
                - auth0.authenticator
                - App\Security\UserAuthenticator
            switch_user: { role: CAN_SWITCH_USER }
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            security: false
            #provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_SYSTEM_ADMIN]
        ROLE_SYSTEM_ADMIN: [ROLE_ACCOUNT_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ACCOUNT_ADMIN: [ROLE_USER]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/admin', roles: [ROLE_ACCOUNT_ADMIN] }
        - { path: '^/app', roles: [ROLE_USER] }
        #- { path: ^/api$, roles: PUBLIC_ACCESS } # PUBLIC_ACCESS is a special role that allows everyone to access the path.
        #- { path: ^/api/scoped$, roles: ROLE_USING_TOKEN } # The ROLE_USING_TOKEN role is added by the Auth0 SDK to any request that includes a valid access token.
        #- { path: ^/api/scoped$, roles: ROLE_READ_MESSAGES } # This route will expect the given access token to have the `read:messages` scope in order to access it.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
