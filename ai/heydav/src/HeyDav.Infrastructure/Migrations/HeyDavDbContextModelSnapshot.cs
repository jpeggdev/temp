// <auto-generated />
using System;
using HeyDav.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeyDav.Infrastructure.Migrations
{
    [DbContext(typeof(HeyDavDbContext))]
    partial class HeyDavDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.AIAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageResponseTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Capabilities")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Capabilities");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedTasksCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastHealthCheckAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuccessfulTasksCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LastActiveAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("AIAgents", (string)null);
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.AgentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedAgentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Parameters");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequiredCapabilities")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("RequiredCapabilities");

                    b.Property<string>("Result")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAgentId");

                    b.HasIndex("DueDate");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Priority");

                    b.HasIndex("ScheduledAt");

                    b.HasIndex("Status");

                    b.ToTable("AgentTasks", (string)null);
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.McpServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageResponseTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedRequestsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastConnectedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastHealthCheckAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SuccessfulRequestsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("SupportedTools")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SupportedTools");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LastConnectedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("McpServers", (string)null);
                });

            modelBuilder.Entity("HeyDav.Domain.FinancialGoals.Entities.FinancialGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FinancialGoals");
                });

            modelBuilder.Entity("HeyDav.Domain.Goals.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AchievedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Metrics")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentGoalId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Progress")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("HeyDav.Domain.Goals.Entities.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetProgress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("HeyDav.Domain.MoodAnalysis.Entities.MoodEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FocusLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageData")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mood")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("StressLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MoodEntries");
                });

            modelBuilder.Entity("HeyDav.Domain.NewsAggregation.Entities.NewsArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FetchedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("RelevanceScore")
                        .HasColumnType("REAL");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsArticles");
                });

            modelBuilder.Entity("HeyDav.Domain.NewsAggregation.Entities.NewsFeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FetchIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastFetchedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsFeeds");
                });

            modelBuilder.Entity("HeyDav.Domain.TodoManagement.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("HeyDav.Domain.TodoManagement.Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DependencyIds")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DependencyIds");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnergyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DueDate");

                    b.HasIndex("GoalId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("Priority");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("Status");

                    b.ToTable("TodoItems", (string)null);
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.AIAgent", b =>
                {
                    b.OwnsOne("HeyDav.Domain.AgentManagement.ValueObjects.AgentConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("AIAgentId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CustomSettings")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("ConfigCustomSettings");

                            b1.Property<int>("MaxConcurrentTasks")
                                .HasColumnType("INTEGER")
                                .HasColumnName("ConfigMaxConcurrentTasks");

                            b1.Property<int>("MaxTokens")
                                .HasColumnType("INTEGER")
                                .HasColumnName("ConfigMaxTokens");

                            b1.Property<string>("ModelName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("ConfigModelName");

                            b1.Property<TimeSpan>("TaskTimeout")
                                .HasColumnType("TEXT")
                                .HasColumnName("ConfigTaskTimeout");

                            b1.Property<double>("Temperature")
                                .HasColumnType("REAL")
                                .HasColumnName("ConfigTemperature");

                            b1.HasKey("AIAgentId");

                            b1.ToTable("AIAgents");

                            b1.WithOwner()
                                .HasForeignKey("AIAgentId");
                        });

                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.AgentTask", b =>
                {
                    b.HasOne("HeyDav.Domain.AgentManagement.Entities.AIAgent", null)
                        .WithMany("CurrentTasks")
                        .HasForeignKey("AssignedAgentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.McpServer", b =>
                {
                    b.OwnsOne("HeyDav.Domain.AgentManagement.ValueObjects.McpServerEndpoint", "Endpoint", b1 =>
                        {
                            b1.Property<Guid>("McpServerId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Headers")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("EndpointHeaders");

                            b1.Property<string>("Host")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("EndpointHost");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("EndpointName");

                            b1.Property<string>("Path")
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("EndpointPath");

                            b1.Property<int>("Port")
                                .HasColumnType("INTEGER")
                                .HasColumnName("EndpointPort");

                            b1.Property<string>("Protocol")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("TEXT")
                                .HasColumnName("EndpointProtocol");

                            b1.Property<bool>("RequiresAuthentication")
                                .HasColumnType("INTEGER")
                                .HasColumnName("EndpointRequiresAuth");

                            b1.HasKey("McpServerId");

                            b1.ToTable("McpServers");

                            b1.WithOwner()
                                .HasForeignKey("McpServerId");
                        });

                    b.Navigation("Endpoint")
                        .IsRequired();
                });

            modelBuilder.Entity("HeyDav.Domain.Goals.Entities.Milestone", b =>
                {
                    b.HasOne("HeyDav.Domain.Goals.Entities.Goal", null)
                        .WithMany("Milestones")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeyDav.Domain.TodoManagement.Entities.TodoItem", b =>
                {
                    b.HasOne("HeyDav.Domain.TodoManagement.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HeyDav.Domain.TodoManagement.Entities.TodoItem", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("HeyDav.Domain.TodoManagement.ValueObjects.RecurrencePattern", "RecurrencePattern", b1 =>
                        {
                            b1.Property<Guid>("TodoItemId")
                                .HasColumnType("TEXT");

                            b1.Property<int?>("DayOfMonth")
                                .HasColumnType("INTEGER")
                                .HasColumnName("RecurrenceDayOfMonth");

                            b1.Property<string>("DaysOfWeek")
                                .HasColumnType("TEXT")
                                .HasColumnName("RecurrenceDaysOfWeek");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("RecurrenceEndDate");

                            b1.Property<int>("Interval")
                                .HasColumnType("INTEGER")
                                .HasColumnName("RecurrenceInterval");

                            b1.Property<int?>("MaxOccurrences")
                                .HasColumnType("INTEGER")
                                .HasColumnName("RecurrenceMaxOccurrences");

                            b1.Property<int>("Type")
                                .HasColumnType("INTEGER")
                                .HasColumnName("RecurrenceType");

                            b1.HasKey("TodoItemId");

                            b1.ToTable("TodoItems");

                            b1.WithOwner()
                                .HasForeignKey("TodoItemId");
                        });

                    b.Navigation("RecurrencePattern")
                        .IsRequired();
                });

            modelBuilder.Entity("HeyDav.Domain.AgentManagement.Entities.AIAgent", b =>
                {
                    b.Navigation("CurrentTasks");
                });

            modelBuilder.Entity("HeyDav.Domain.Goals.Entities.Goal", b =>
                {
                    b.Navigation("Milestones");
                });
#pragma warning restore 612, 618
        }
    }
}
